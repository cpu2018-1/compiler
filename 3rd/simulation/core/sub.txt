1139 142
2
4
5
7
8
9
11
12
14
15
17
18
20
21
23
24
26
28
29
30
31
33
35
36
38
40
41
42
43
45
47
48
50
51
52
53
54
55
56
57
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
79
80
81
82
84
85
86
87
88
89
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
111
113
114
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
136
137
139
140
141
142
143
144
146
147
148
149
150
151
152
154
155
156
158
159
160
163
164
165
166
168
169
170
171
172
173
175
176
178
179
180
181
182
183
184
186
187
188
189
191
192
193
194
195
196
198
199
201
202
203
204
205
207
208
210
211
212
213
214
215
216
217
218
219
220
221
223
224
225
226
227
228
229
230
231
232
233
234
235
237
238
239
240
241
243
244
246
247
248
249
250
252
253
255
256
257
258
259
261
262
264
265
266
268
269
271
272
273
275
276
278
279
280
281
283
284
286
287
288
289
290
291
292
293
294
295
296
297
298
299
300
302
303
304
306
307
308
309
310
312
313
314
315
316
317
319
320
321
323
325
326
327
328
329
330
331
332
333
335
336
338
339
341
342
343
344
345
346
347
348
349
350
352
353
354
356
358
359
360
361
362
363
364
365
366
367
368
369
370
371
372
373
376
377
378
380
381
382
383
384
385
386
387
388
389
390
391
392
393
394
395
396
398
399
400
401
402
403
404
405
406
407
408
409
411
412
413
414
415
416
418
420
421
422
423
424
425
426
427
428
429
430
431
432
433
434
435
436
437
438
439
440
441
442
443
444
445
446
447
448
449
450
451
452
453
455
456
457
458
459
460
461
462
463
464
465
467
468
469
470
471
472
473
474
475
476
477
478
480
481
482
483
484
485
486
487
488
489
490
492
493
494
495
496
497
498
499
500
501
502
503
504
505
506
508
509
510
511
512
513
514
515
516
517
519
520
521
522
523
524
525
526
527
528
529
531
532
533
534
535
536
537
538
539
540
542
543
544
545
546
547
548
549
550
551
552
553
554
555
556
557
558
559
560
561
562
563
564
565
566
567
568
569
570
571
572
573
574
575
576
577
579
580
581
582
583
584
585
586
587
588
589
591
592
593
594
595
596
597
598
599
600
601
602
604
605
606
607
608
609
610
611
612
613
614
616
617
618
619
620
621
622
623
624
625
626
627
628
629
630
631
632
634
635
636
637
638
639
640
641
642
643
644
646
647
648
649
650
651
652
653
654
655
656
658
659
660
661
662
663
664
665
666
667
669
670
671
672
673
674
675
676
677
678
679
680
681
682
683
684
685
686
687
688
689
690
691
692
693
694
695
696
697
698
699
700
701
702
703
704
705
706
707
708
709
710
711
712
713
714
715
716
717
718
719
720
721
722
723
724
725
726
727
728
729
731
732
733
734
735
737
739
740
741
742
743
744
745
746
747
748
749
750
751
752
753
754
755
756
757
758
759
760
762
763
764
765
766
767
768
769
770
771
772
773
774
775
776
777
778
779
781
783
784
786
787
788
789
791
792
793
794
795
796
797
798
800
801
802
803
804
805
806
808
809
811
812
813
815
816
817
818
819
820
822
824
825
826
827
828
829
830
831
832
833
834
835
836
838
840
841
842
843
845
846
847
848
849
850
851
852
853
854
855
856
858
859
861
862
863
864
865
866
867
868
869
870
871
872
873
874
875
876
877
878
879
880
881
882
883
884
886
887
888
889
890
891
892
893
894
895
896
897
898
899
900
901
902
903
904
905
906
907
908
909
910
911
912
913
914
915
916
918
919
921
922
923
924
926
927
928
929
930
931
932
933
934
935
936
937
938
939
940
941
942
943
944
945
946
947
949
950
951
952
953
954
955
956
957
958
959
960
961
963
965
966
967
968
969
970
971
972
973
974
975
976
977
978
979
980
981
982
983
984
986
988
989
990
992
993
995
996
997
999
1000
1002
1003
1004
1006
1007
1009
1010
1011
1013
1014
1016
1017
1018
1019
1020
1021
1022
1023
1024
1025
1026
1027
1029
1030
1031
1032
1033
1035
1037
1038
1039
1040
1041
1042
1043
1044
1045
1046
1047
1048
1049
1050
1051
1052
1053
1054
1055
1056
1057
1058
1059
1060
1061
1062
1063
1064
1065
1066
1067
1068
1069
1070
1071
1072
1073
1074
1075
1076
1077
1078
1079
1080
1081
1082
1083
1084
1085
1086
1087
1088
1089
1090
1091
1092
1093
1094
1095
1096
1097
1098
1100
1101
1102
1103
1104
1105
1106
1107
1108
1109
1110
1111
1112
1113
1114
1115
1116
1117
1118
1119
1120
1121
1122
1123
1124
1125
1126
1127
1129
1131
1132
1133
1134
1136
1137
1139
1140
1141
1142
1144
1145
1146
1147
1148
1149
1150
1151
1152
1153
1154
1155
1156
1157
1158
1159
1160
1161
1162
1163
1164
1165
1166
1167
1168
1169
1170
1172
1173
1174
1175
1176
1177
1178
1179
1180
1181
1182
1183
1184
1185
1186
1187
1188
1189
1190
1191
1192
1193
1194
1195
1196
1197
1198
1199
1200
1201
1202
1203
1205
1206
1208
1209
1211
1212
1213
1214
1216
1217
1218
1219
1220
1221
1222
1223
1224
1225
1229
1230
1231
1232
1233
1234
1235
1236
1237
1238
1239
1240
1241
1242
1243
1244
1245
1246
1247
1248
1249
1251
1254
1255
1257
1258
1259
1260
1261
1262
1263
1264
1265
1266
1267
1268
1269
1270
1271
1272
1273
1274
1276
1277
1278
1279
1280
1281
1282
1283
1284
1285
1286
1 3 lib_print_char
3 6 lib_print_newline
6 10 lib_itof
8 13 lib_ftoi
10 16 lib_fneg
12 19 lib_sqrt
14 22 lib_create_array
16 25 lib_create_array_loop
17 27 lib_create_array_cont
21 32 lib_create_array_exit
22 34 lib_create_float_array
24 37 lib_create_float_array_loop
25 39 lib_create_float_array_cont
29 44 lib_create_float_array_exit
30 46 lib_read_char
32 49 lib_buffer_add_char
40 58 lib_buffer_clear
59 78 lib_buffer_get
63 83 lib_buffer_to_int
69 90 lib_buffer_to_int_cont
88 110 lib_buffer_to_int_exit
89 112 lib_buffer_to_int_minus
91 115 lib_buffer_to_int_minus_cont
110 135 lib_buffer_to_int_minus_exit
112 138 lib_buffer_to_int_of_float
118 145 lib_buffer_to_pos_loop
125 153 lib_buffer_to_int_of_float_minus
128 157 lib_buffer_to_int_cont_ready
131 162 lib_buffer_to_dec_of_float
135 167 lib_buffer_to_pos_loop_dec
141 174 lib_buffer_to_dec_zero
143 177 lib_buffer_to_dec_of_float_cont
150 185 lib_buffer_to_ika_keta_of_float
154 190 lib_buffer_to_pos_loop_keta
160 197 lib_buffer_to_ika_keta_zero
162 200 lib_buffer_to_ika_keta_of_float_cont
167 206 lib_fless
169 209 lib_read_int
181 222 lib_read_float
194 236 lib_fispos
199 242 _fle_else.876
201 245 lib_fisneg
206 251 _fle_else.877
208 254 lib_fiszero
213 260 _feq_else.878
215 263 lib_xor
218 267 _beq_then.879
220 270 lib_fhalf
223 274 lib_fsqr
225 277 lib_fabs
229 282 _fle_else.880
231 285 lib_floor
246 301 _fle_else.881
249 305 lib_int_of_float
254 311 _feq_else.882
260 318 _fle_else.883
263 322 lib_float_of_int
264 324 lib_hoge
273 334 _fle_else.885
275 337 _fle_else.884
277 340 lib_fuga
287 351 _fle_else.887
290 355 _fle_else.886
291 357 lib_modulo_2pi
307 374 _fle_else.888
307 375 _fle_cont.889
310 379 lib_sin_body
327 397 lib_cos_body
339 410 lib_sin
345 417 _fle_else.890
346 419 _fle_cont.891
380 454 _fle_else.894
391 466 _fle_else.893
403 479 _fle_else.895
414 491 _fle_else.892
429 507 _fle_else.897
439 518 _fle_else.896
450 530 _fle_else.898
460 541 lib_cos
496 578 _fle_else.901
507 590 _fle_else.900
519 603 _fle_else.902
530 615 _fle_else.899
547 633 _fle_else.904
558 645 _fle_else.903
569 657 _fle_else.905
579 668 lib_atan_body
640 730 lib_atan
645 736 _fle_else.906
646 738 _fle_cont.907
668 761 _fle_else.909
686 780 _fle_else.908
687 782 lib_print_num
689 785 lib_mul10
693 790 lib_div10_sub
701 799 _ble_then.910
708 807 _ble_then.911
710 810 lib_div10
713 814 lib_iter_mul10
719 821 _beq_then.912
720 823 lib_iter_div10
733 837 _beq_then.913
734 839 lib_keta_sub
738 844 _ble_then.914
750 857 lib_keta
752 860 lib_print_uint_keta
776 885 _ble_then.916
807 917 _beq_then.915
809 920 lib_print_uint
813 925 _ble_then.917
835 948 lib_print_int
848 962 _ble_then.918
849 964 lib_read_token
869 985 _beq_then.923
870 987 _beq_then.922
873 991 _beq_then.925
875 994 _beq_then.921
878 998 _beq_then.927
880 1001 _beq_then.920
883 1005 _beq_then.929
885 1008 _beq_then.919
888 1012 _beq_then.931
890 1015 lib_read_int_ascii
902 1028 lib_iter_div10_float
907 1034 _beq_then.933
908 1036 lib_read_float_ascii
970 1099 _beq_then.934
998 1128 lib_truncate
999 1130 lib_abs_float
1003 1135 _fle_else.935
1005 1138 lib_print_dec
1009 1143 _feq_else.936
1036 1171 lib_print_ufloat
1068 1204 _fle_else.938
1070 1207 _fle_cont.939
1072 1210 lib_print_float
1076 1215 _fle_else.940
1086 1226 _R_0
1086 1228 fib.10
1107 1250 ble_then.24
1108 1252 _R_0
1108 1253 _min_caml_start
