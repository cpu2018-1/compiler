1097 145
2
4
5
7
8
9
11
12
14
15
17
18
20
21
23
24
26
28
29
30
31
33
35
36
38
40
41
42
43
45
47
48
50
51
52
53
54
55
56
57
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
79
80
81
82
84
85
86
87
88
89
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
111
113
114
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
136
137
139
140
141
142
143
144
146
147
148
149
150
151
152
154
155
156
158
159
160
163
164
165
166
168
169
170
171
172
173
175
176
178
179
180
181
182
183
184
186
187
188
189
191
192
193
194
195
196
198
199
201
202
203
204
205
207
208
210
211
212
213
214
215
216
217
218
219
220
221
223
224
225
226
227
228
229
230
231
232
233
234
235
237
238
239
240
241
243
244
246
247
248
249
250
252
253
255
256
257
258
259
261
262
264
265
266
268
269
271
272
273
275
276
278
279
280
281
283
284
286
287
288
289
290
292
293
294
295
296
297
298
300
301
302
303
305
306
308
309
310
311
312
313
314
315
316
317
318
320
321
322
324
325
326
327
328
329
330
331
332
334
335
337
338
340
341
342
343
344
345
346
347
348
349
351
352
353
355
357
358
359
360
361
362
363
364
365
366
367
368
369
370
371
372
375
376
377
379
380
381
382
383
384
385
386
387
388
389
390
391
392
393
394
395
397
398
399
400
401
402
403
404
405
406
407
408
410
411
412
413
415
416
418
419
420
421
422
423
425
427
428
429
430
432
434
435
436
437
438
439
440
441
442
443
444
445
446
447
448
449
450
451
452
453
454
455
456
457
458
459
460
461
462
464
465
466
467
468
469
470
471
472
473
474
476
477
478
479
480
481
482
483
484
485
486
487
489
490
491
492
493
494
495
496
497
498
499
501
502
503
504
505
506
507
508
509
510
511
512
513
514
515
517
518
519
520
521
522
523
524
525
526
528
529
530
531
532
533
534
535
536
537
538
540
541
542
543
544
545
546
547
548
549
551
552
553
554
555
556
558
560
561
562
563
564
565
566
567
568
569
570
571
572
573
574
575
576
577
578
579
580
581
582
583
584
585
586
587
588
590
591
592
593
594
595
596
597
598
599
600
602
603
604
605
606
607
608
609
610
611
612
613
615
616
617
618
619
620
621
622
623
624
625
627
628
629
630
631
632
633
634
635
636
637
638
639
640
641
642
643
645
646
647
648
649
650
651
652
653
654
655
657
658
659
660
661
662
663
664
665
666
667
669
670
671
672
673
674
675
676
677
678
680
681
682
683
684
685
686
687
688
689
690
691
692
693
694
695
696
697
698
699
700
701
702
703
704
705
706
707
708
709
710
711
712
713
714
715
716
717
718
719
720
721
722
723
724
725
726
727
728
729
730
731
732
733
734
735
736
737
738
739
740
742
743
744
745
746
748
750
751
752
753
754
755
756
757
758
759
760
761
762
763
764
765
766
767
768
769
770
771
773
774
775
776
777
778
779
780
781
782
783
784
785
786
787
788
789
790
792
794
795
797
798
799
800
802
803
804
805
806
807
808
809
811
812
813
814
815
816
817
819
820
822
823
824
826
827
828
829
830
831
833
835
836
837
838
839
840
841
842
843
844
845
846
847
849
851
852
853
854
856
857
858
859
860
861
862
863
864
865
866
867
869
870
872
873
874
875
876
877
878
879
880
881
882
883
884
885
886
887
888
889
890
891
892
893
894
895
897
898
899
900
901
902
903
904
905
906
907
908
909
910
911
912
913
914
915
916
917
918
919
920
921
922
923
924
925
926
927
929
930
932
933
934
935
937
938
939
940
941
942
943
944
945
946
947
948
949
950
951
952
953
954
955
956
957
958
960
961
962
963
964
965
966
967
968
969
970
971
972
974
976
977
978
979
980
981
982
983
984
985
986
987
988
989
990
991
992
993
994
995
997
999
1000
1001
1003
1004
1006
1007
1008
1010
1011
1013
1014
1015
1017
1018
1020
1021
1022
1024
1025
1027
1028
1029
1030
1031
1032
1033
1034
1035
1036
1037
1038
1040
1041
1042
1043
1044
1046
1048
1049
1050
1051
1052
1053
1054
1055
1056
1057
1058
1059
1060
1061
1062
1063
1064
1065
1066
1067
1068
1069
1070
1071
1072
1073
1074
1075
1076
1077
1078
1079
1080
1081
1082
1083
1084
1085
1086
1087
1088
1089
1090
1091
1092
1093
1094
1095
1096
1097
1098
1099
1101
1102
1103
1104
1105
1106
1107
1108
1109
1110
1111
1112
1113
1114
1115
1116
1117
1118
1120
1122
1123
1124
1125
1127
1128
1129
1130
1131
1132
1133
1134
1135
1136
1137
1138
1139
1140
1141
1142
1143
1144
1145
1146
1147
1148
1149
1151
1152
1153
1154
1155
1156
1157
1158
1159
1160
1161
1162
1163
1164
1165
1166
1167
1168
1169
1170
1171
1172
1173
1174
1175
1176
1177
1178
1180
1181
1183
1184
1186
1187
1188
1189
1191
1192
1193
1194
1195
1196
1197
1198
1199
1200
1204
1205
1208
1209
1211
1212
1213
1214
1215
1216
1217
1218
1219
1220
1221
1222
1223
1224
1225
1226
1227
1228
1230
1231
1232
1233
1234
1235
1236
1237
1238
1239
1240
1241
1242
1243
1244
1245
1246
1247
1 3 lib_print_char
3 6 lib_print_newline
6 10 lib_itof
8 13 lib_ftoi
10 16 lib_fneg
12 19 lib_sqrt
14 22 lib_create_array
16 25 lib_create_array_loop
17 27 lib_create_array_cont
21 32 lib_create_array_exit
22 34 lib_create_float_array
24 37 lib_create_float_array_loop
25 39 lib_create_float_array_cont
29 44 lib_create_float_array_exit
30 46 lib_read_char
32 49 lib_buffer_add_char
40 58 lib_buffer_clear
59 78 lib_buffer_get
63 83 lib_buffer_to_int
69 90 lib_buffer_to_int_cont
88 110 lib_buffer_to_int_exit
89 112 lib_buffer_to_int_minus
91 115 lib_buffer_to_int_minus_cont
110 135 lib_buffer_to_int_minus_exit
112 138 lib_buffer_to_int_of_float
118 145 lib_buffer_to_pos_loop
125 153 lib_buffer_to_int_of_float_minus
128 157 lib_buffer_to_int_cont_ready
131 162 lib_buffer_to_dec_of_float
135 167 lib_buffer_to_pos_loop_dec
141 174 lib_buffer_to_dec_zero
143 177 lib_buffer_to_dec_of_float_cont
150 185 lib_buffer_to_ika_keta_of_float
154 190 lib_buffer_to_pos_loop_keta
160 197 lib_buffer_to_ika_keta_zero
162 200 lib_buffer_to_ika_keta_of_float_cont
167 206 lib_fless
169 209 lib_read_int
181 222 lib_read_float
194 236 lib_fispos
199 242 _fle_else.889
201 245 lib_fisneg
206 251 _fle_else.890
208 254 lib_fiszero
213 260 _feq_else.891
215 263 lib_xor
218 267 _beq_then.892
220 270 lib_fhalf
223 274 lib_fsqr
225 277 lib_fabs
229 282 _fle_else.893
231 285 lib_int_of_float
236 291 _feq_else.894
243 299 _fle_else.895
247 304 lib_float_of_int
249 307 lib_floor
260 319 _fle_else.896
263 323 lib_hoge
272 333 _fle_else.898
274 336 _fle_else.897
276 339 lib_fuga
286 350 _fle_else.900
289 354 _fle_else.899
290 356 lib_modulo_2pi
306 373 _fle_else.901
306 374 _fle_cont.902
309 378 lib_sin_body
326 396 lib_cos_body
338 409 lib_abs_float
342 414 _fle_else.903
344 417 lib_sin
350 424 _fle_else.904
351 426 _fle_cont.905
355 431 _fle_else.906
356 433 _fle_cont.907
385 463 _fle_else.910
396 475 _fle_else.909
408 488 _fle_else.911
419 500 _fle_else.908
434 516 _fle_else.913
444 527 _fle_else.912
455 539 _fle_else.914
465 550 lib_cos
471 557 _fle_else.915
472 559 _fle_cont.916
501 589 _fle_else.919
512 601 _fle_else.918
524 614 _fle_else.920
535 626 _fle_else.917
552 644 _fle_else.922
563 656 _fle_else.921
574 668 _fle_else.923
584 679 lib_atan_body
645 741 lib_atan
650 747 _fle_else.924
651 749 _fle_cont.925
673 772 _fle_else.927
691 791 _fle_else.926
692 793 lib_print_num
694 796 lib_mul10
698 801 lib_div10_sub
706 810 _ble_then.928
713 818 _ble_then.929
715 821 lib_div10
718 825 lib_iter_mul10
724 832 _beq_then.930
725 834 lib_iter_div10
738 848 _beq_then.931
739 850 lib_keta_sub
743 855 _ble_then.932
755 868 lib_keta
757 871 lib_print_uint_keta
781 896 _ble_then.934
812 928 _beq_then.933
814 931 lib_print_uint
818 936 _ble_then.935
840 959 lib_print_int
853 973 _ble_then.936
854 975 lib_read_token
874 996 _beq_then.941
875 998 _beq_then.940
878 1002 _beq_then.943
880 1005 _beq_then.939
883 1009 _beq_then.945
885 1012 _beq_then.938
888 1016 _beq_then.947
890 1019 _beq_then.937
893 1023 _beq_then.949
895 1026 lib_read_int_ascii
907 1039 lib_iter_div10_float
912 1045 _beq_then.951
913 1047 lib_read_float_ascii
965 1100 _beq_then.952
983 1119 lib_truncate
984 1121 lib_print_dec
988 1126 _feq_else.954
1011 1150 lib_print_ufloat
1039 1179 _fle_else.956
1041 1182 _fle_cont.957
1043 1185 lib_print_float
1047 1190 _fle_else.958
1057 1201 _R_0
1057 1203 f.8.22
1059 1206 _R_0
1059 1207 _min_caml_start
